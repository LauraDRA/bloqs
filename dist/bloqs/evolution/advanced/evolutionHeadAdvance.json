{
  "type": "statement",
  "name": "evolutionHeadAdvance",
  "connectors": [
    {
      "type": "connector--top",
      "accept": "connector--bottom"
    },
    {
      "type": "connector--bottom",
      "accept": "connector--top"
    },
    {
      "type": "connector--input",
      "accept": "connector--output",
      "acceptType": [
        "float"
      ],
      "suggestedBloqs": [
        "number",
        "selectVariable"
      ],
      "name": "b016490c-e2ce-4423-8127-d3fddea12644"
    }
  ],
  "bloqClass": "bloq-evolution-head",
  "content": [
    [
      {
        "alias": "text",
        "value": "bloq-evolution-head-advance"
      },
      {
        "bloqInputId": "DEGREES",
        "alias": "bloqInput",
        "acceptType": [
          "float"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "b016490c-e2ce-4423-8127-d3fddea12644"
      },
      {
        "alias": "text",
        "value": "bloq-evolution-head-advance-deg"
      },
      {
        "id": "SIDE",
        "alias": "staticDropdown",
        "options": [
          {
            "label": "bloq-evolution-head-advance-left",
            "value": "HEAD_LEFT"
          },
          {
            "label": "bloq-evolution-head-advance-right",
            "value": "HEAD_RIGHT"
          }
        ]
      }
    ]
  ],
  "code": "'{SIDE}' === 'HEAD_LEFT'? 'evolution.turnHead({DEGREES});' : 'evolution.turnHead(-{DEGREES});'",
  "arduino": {
    "includes": [
      "BitbloqEvolution.h",
      "BitbloqUS.h",
      "Servo.h",
      "BitbloqOscillator.h"
    ],
    "needInstanceOf": [
      {
        "name": "evolution",
        "type": "Evolution"
      }
    ],
    "setupExtraCode": "evolution.init();",
    "conditional": {
      "aliasId": "SIDE",
      "code": {
        "HEAD_LEFT": "evolution.turnHead({DEGREES});",
        "HEAD_RIGHT": "evolution.turnHead(-{DEGREES});"
      }
    }
  },
  "python": {
    "codeLines": [
      {
        "code": "Bloque \"evolutionHeadAdvance\" no preparado para generar c√≥digo python"
      }
    ]
  }
}